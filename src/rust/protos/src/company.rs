// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct CompanyRequest {
    // message fields
    pub uen: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl CompanyRequest {
    pub fn new() -> CompanyRequest {
        ::std::default::Default::default()
    }

    // string uen = 1;

    pub fn clear_uen(&mut self) {
        self.uen.clear();
    }

    // Param is passed by value, moved
    pub fn set_uen(&mut self, v: ::std::string::String) {
        self.uen = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uen(&mut self) -> &mut ::std::string::String {
        &mut self.uen
    }

    // Take field
    pub fn take_uen(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uen, ::std::string::String::new())
    }

    pub fn get_uen(&self) -> &str {
        &self.uen
    }
}

impl ::protobuf::Message for CompanyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uen)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uen.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uen);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.uen.is_empty() {
            os.write_string(1, &self.uen)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CompanyRequest {
        CompanyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "uen",
                    |m: &CompanyRequest| { &m.uen },
                    |m: &mut CompanyRequest| { &mut m.uen },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CompanyRequest>(
                    "CompanyRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CompanyRequest {
        static mut instance: ::protobuf::lazy::Lazy<CompanyRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CompanyRequest,
        };
        unsafe {
            instance.get(CompanyRequest::new)
        }
    }
}

impl ::protobuf::Clear for CompanyRequest {
    fn clear(&mut self) {
        self.clear_uen();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CompanyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompanyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CompanyResponse {
    // message fields
    pub uen: ::std::string::String,
    pub name: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl CompanyResponse {
    pub fn new() -> CompanyResponse {
        ::std::default::Default::default()
    }

    // string uen = 1;

    pub fn clear_uen(&mut self) {
        self.uen.clear();
    }

    // Param is passed by value, moved
    pub fn set_uen(&mut self, v: ::std::string::String) {
        self.uen = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uen(&mut self) -> &mut ::std::string::String {
        &mut self.uen
    }

    // Take field
    pub fn take_uen(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uen, ::std::string::String::new())
    }

    pub fn get_uen(&self) -> &str {
        &self.uen
    }

    // string name = 2;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }
}

impl ::protobuf::Message for CompanyResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uen)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uen.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uen);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.uen.is_empty() {
            os.write_string(1, &self.uen)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CompanyResponse {
        CompanyResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "uen",
                    |m: &CompanyResponse| { &m.uen },
                    |m: &mut CompanyResponse| { &mut m.uen },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &CompanyResponse| { &m.name },
                    |m: &mut CompanyResponse| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CompanyResponse>(
                    "CompanyResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CompanyResponse {
        static mut instance: ::protobuf::lazy::Lazy<CompanyResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CompanyResponse,
        };
        unsafe {
            instance.get(CompanyResponse::new)
        }
    }
}

impl ::protobuf::Clear for CompanyResponse {
    fn clear(&mut self) {
        self.clear_uen();
        self.clear_name();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CompanyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompanyResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18src/protos/company.proto\x12\x07company\"\"\n\x0eCompanyRequest\
    \x12\x10\n\x03uen\x18\x01\x20\x01(\tR\x03uen\"7\n\x0fCompanyResponse\x12\
    \x10\n\x03uen\x18\x01\x20\x01(\tR\x03uen\x12\x12\n\x04name\x18\x02\x20\
    \x01(\tR\x04name2L\n\x07Company\x12A\n\nGetCompany\x12\x17.company.Compa\
    nyRequest\x1a\x18.company.CompanyResponse\"\0J\x8e\x05\n\x06\x12\x04\x02\
    \0\x15\x01\nH\n\x01\x0c\x12\x03\x02\0\x122>\x20protoc\x20--js_out=import\
    _style=commonjs,binary:.\x20company.proto\n\n\x08\n\x01\x02\x12\x03\x04\
    \x08\x0f\n\n\n\x02\x06\0\x12\x04\x06\0\x0c\x01\n\n\n\x03\x06\0\x01\x12\
    \x03\x06\x08\x0f\n\xeb\x01\n\x04\x06\0\x02\0\x12\x03\x0b\x04?\x1a\xdd\
    \x01\x20rpc\x20GetFeature(Point)\x20returns\x20(Feature)\x20{}\n\x20rpc\
    \x20ListFeatures(Rectangle)\x20returns\x20(stream\x20Feature)\x20{}\n\
    \x20rpc\x20RecordRoute(stream\x20Point)\x20returns\x20(RouteSummary)\x20\
    {}\n\x20rpc\x20RouteChat(stream\x20RouteNode)\x20returns\x20(stream\x20R\
    outeNote)\x20{}\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x0b\x08\x12\n\x0c\
    \n\x05\x06\0\x02\0\x02\x12\x03\x0b\x13!\n\x0c\n\x05\x06\0\x02\0\x03\x12\
    \x03\x0b,;\n\n\n\x02\x04\0\x12\x04\x0e\0\x10\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\x0e\x08\x16\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0f\x04\x13\n\r\n\x05\
    \x04\0\x02\0\x04\x12\x04\x0f\x04\x0e\x18\n\x0c\n\x05\x04\0\x02\0\x05\x12\
    \x03\x0f\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0f\x0b\x0e\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\x0f\x11\x12\n\n\n\x02\x04\x01\x12\x04\x12\0\
    \x15\x01\n\n\n\x03\x04\x01\x01\x12\x03\x12\x08\x17\n\x0b\n\x04\x04\x01\
    \x02\0\x12\x03\x13\x04\x13\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x13\x04\
    \x12\x19\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x13\x04\n\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03\x13\x0b\x0e\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\
    \x13\x11\x12\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x14\x04\x14\n\r\n\x05\
    \x04\x01\x02\x01\x04\x12\x04\x14\x04\x13\x13\n\x0c\n\x05\x04\x01\x02\x01\
    \x05\x12\x03\x14\x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x14\x0b\
    \x0f\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x14\x12\x13b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
