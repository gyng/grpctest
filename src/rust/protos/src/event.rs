// This file is generated by rust-protobuf 2.0.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct PutEventRequest {
    // message fields
    pub field_type: ::std::string::String,
    pub payload: ::protobuf::SingularPtrField<::protobuf::well_known_types::Struct>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl PutEventRequest {
    pub fn new() -> PutEventRequest {
        ::std::default::Default::default()
    }

    // string type = 1;

    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }

    // .google.protobuf.Struct payload = 2;

    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    pub fn has_payload(&self) -> bool {
        self.payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::protobuf::well_known_types::Struct) {
        self.payload = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::protobuf::well_known_types::Struct {
        if self.payload.is_none() {
            self.payload.set_default();
        }
        self.payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_payload(&mut self) -> ::protobuf::well_known_types::Struct {
        self.payload.take().unwrap_or_else(|| ::protobuf::well_known_types::Struct::new())
    }

    pub fn get_payload(&self) -> &::protobuf::well_known_types::Struct {
        self.payload.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Struct::default_instance())
    }
}

impl ::protobuf::Message for PutEventRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.payload {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_type);
        }
        if let Some(ref v) = self.payload.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.field_type.is_empty() {
            os.write_string(1, &self.field_type)?;
        }
        if let Some(ref v) = self.payload.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PutEventRequest {
        PutEventRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "type",
                    |m: &PutEventRequest| { &m.field_type },
                    |m: &mut PutEventRequest| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Struct>>(
                    "payload",
                    |m: &PutEventRequest| { &m.payload },
                    |m: &mut PutEventRequest| { &mut m.payload },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PutEventRequest>(
                    "PutEventRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PutEventRequest {
        static mut instance: ::protobuf::lazy::Lazy<PutEventRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PutEventRequest,
        };
        unsafe {
            instance.get(PutEventRequest::new)
        }
    }
}

impl ::protobuf::Clear for PutEventRequest {
    fn clear(&mut self) {
        self.clear_field_type();
        self.clear_payload();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PutEventRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PutEventRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventResponse {
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl EventResponse {
    pub fn new() -> EventResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for EventResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventResponse {
        EventResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<EventResponse>(
                    "EventResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EventResponse {
        static mut instance: ::protobuf::lazy::Lazy<EventResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EventResponse,
        };
        unsafe {
            instance.get(EventResponse::new)
        }
    }
}

impl ::protobuf::Clear for EventResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetEventsSinceRequest {
    // message fields
    pub field_type: ::std::string::String,
    pub id: i32,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl GetEventsSinceRequest {
    pub fn new() -> GetEventsSinceRequest {
        ::std::default::Default::default()
    }

    // string type = 1;

    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }

    // int32 id = 2;

    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i32) {
        self.id = v;
    }

    pub fn get_id(&self) -> i32 {
        self.id
    }
}

impl ::protobuf::Message for GetEventsSinceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_type);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.field_type.is_empty() {
            os.write_string(1, &self.field_type)?;
        }
        if self.id != 0 {
            os.write_int32(2, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetEventsSinceRequest {
        GetEventsSinceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "type",
                    |m: &GetEventsSinceRequest| { &m.field_type },
                    |m: &mut GetEventsSinceRequest| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "id",
                    |m: &GetEventsSinceRequest| { &m.id },
                    |m: &mut GetEventsSinceRequest| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetEventsSinceRequest>(
                    "GetEventsSinceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetEventsSinceRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetEventsSinceRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetEventsSinceRequest,
        };
        unsafe {
            instance.get(GetEventsSinceRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetEventsSinceRequest {
    fn clear(&mut self) {
        self.clear_field_type();
        self.clear_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetEventsSinceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetEventsSinceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetEventsSinceResponse {
    // message fields
    pub field_type: ::std::string::String,
    pub events: ::protobuf::RepeatedField<::protobuf::well_known_types::Struct>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl GetEventsSinceResponse {
    pub fn new() -> GetEventsSinceResponse {
        ::std::default::Default::default()
    }

    // string type = 1;

    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }

    // repeated .google.protobuf.Struct events = 2;

    pub fn clear_events(&mut self) {
        self.events.clear();
    }

    // Param is passed by value, moved
    pub fn set_events(&mut self, v: ::protobuf::RepeatedField<::protobuf::well_known_types::Struct>) {
        self.events = v;
    }

    // Mutable pointer to the field.
    pub fn mut_events(&mut self) -> &mut ::protobuf::RepeatedField<::protobuf::well_known_types::Struct> {
        &mut self.events
    }

    // Take field
    pub fn take_events(&mut self) -> ::protobuf::RepeatedField<::protobuf::well_known_types::Struct> {
        ::std::mem::replace(&mut self.events, ::protobuf::RepeatedField::new())
    }

    pub fn get_events(&self) -> &[::protobuf::well_known_types::Struct] {
        &self.events
    }
}

impl ::protobuf::Message for GetEventsSinceResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.events {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.events)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_type);
        }
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.field_type.is_empty() {
            os.write_string(1, &self.field_type)?;
        }
        for v in &self.events {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetEventsSinceResponse {
        GetEventsSinceResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "type",
                    |m: &GetEventsSinceResponse| { &m.field_type },
                    |m: &mut GetEventsSinceResponse| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Struct>>(
                    "events",
                    |m: &GetEventsSinceResponse| { &m.events },
                    |m: &mut GetEventsSinceResponse| { &mut m.events },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetEventsSinceResponse>(
                    "GetEventsSinceResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetEventsSinceResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetEventsSinceResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetEventsSinceResponse,
        };
        unsafe {
            instance.get(GetEventsSinceResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetEventsSinceResponse {
    fn clear(&mut self) {
        self.clear_field_type();
        self.clear_events();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetEventsSinceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetEventsSinceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16src/protos/event.proto\x12\x05event\x1a\x1cgoogle/protobuf/struct.\
    proto\"X\n\x0fPutEventRequest\x12\x12\n\x04type\x18\x01\x20\x01(\tR\x04t\
    ype\x121\n\x07payload\x18\x02\x20\x01(\x0b2\x17.google.protobuf.StructR\
    \x07payload\"\x0f\n\rEventResponse\";\n\x15GetEventsSinceRequest\x12\x12\
    \n\x04type\x18\x01\x20\x01(\tR\x04type\x12\x0e\n\x02id\x18\x02\x20\x01(\
    \x05R\x02id\"]\n\x16GetEventsSinceResponse\x12\x12\n\x04type\x18\x01\x20\
    \x01(\tR\x04type\x12/\n\x06events\x18\x02\x20\x03(\x0b2\x17.google.proto\
    buf.StructR\x06events2\x94\x01\n\x05Event\x12:\n\x08PutEvent\x12\x16.eve\
    nt.PutEventRequest\x1a\x14.event.EventResponse\"\0\x12O\n\x0eGetEventsSi\
    nce\x12\x1c.event.GetEventsSinceRequest\x1a\x1d.event.GetEventsSinceResp\
    onse\"\0J\xdc\x06\n\x06\x12\x04\x02\0\x1e\x01\nF\n\x01\x0c\x12\x03\x02\0\
    \x122<\x20protoc\x20--js_out=import_style=commonjs,binary:.\x20event.pro\
    to\n\n\t\n\x02\x03\0\x12\x03\x04\x07%\n\x08\n\x01\x02\x12\x03\x06\x08\r\
    \n\n\n\x02\x06\0\x12\x04\x08\0\x0b\x01\n\n\n\x03\x06\0\x01\x12\x03\x08\
    \x08\r\n\x0b\n\x04\x06\0\x02\0\x12\x03\t\x04<\n\x0c\n\x05\x06\0\x02\0\
    \x01\x12\x03\t\x08\x10\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\t\x11\x20\n\
    \x0c\n\x05\x06\0\x02\0\x03\x12\x03\t+8\n\x0b\n\x04\x06\0\x02\x01\x12\x03\
    \n\x04Q\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\n\x08\x16\n\x0c\n\x05\x06\
    \0\x02\x01\x02\x12\x03\n\x17,\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\n7M\
    \n\n\n\x02\x04\0\x12\x04\r\0\x10\x01\n\n\n\x03\x04\0\x01\x12\x03\r\x08\
    \x17\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0e\x04\x14\n\r\n\x05\x04\0\x02\0\
    \x04\x12\x04\x0e\x04\r\x19\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0e\x04\n\
    \n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0e\x0b\x0f\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\x0e\x12\x13\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0f\x04'\n\r\
    \n\x05\x04\0\x02\x01\x04\x12\x04\x0f\x04\x0e\x14\n\x0c\n\x05\x04\0\x02\
    \x01\x06\x12\x03\x0f\x04\x1a\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0f\
    \x1b\"\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0f%&\n\t\n\x02\x04\x01\x12\
    \x03\x12\0\x18\n\n\n\x03\x04\x01\x01\x12\x03\x12\x08\x15\n\n\n\x02\x04\
    \x02\x12\x04\x14\0\x17\x01\n\n\n\x03\x04\x02\x01\x12\x03\x14\x08\x1d\n\
    \x0b\n\x04\x04\x02\x02\0\x12\x03\x15\x04\x14\n\r\n\x05\x04\x02\x02\0\x04\
    \x12\x04\x15\x04\x14\x1f\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x15\x04\n\
    \n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x15\x0b\x0f\n\x0c\n\x05\x04\x02\
    \x02\0\x03\x12\x03\x15\x12\x13\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x16\
    \x04\x11\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04\x16\x04\x15\x14\n\x0c\n\
    \x05\x04\x02\x02\x01\x05\x12\x03\x16\x04\t\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03\x16\n\x0c\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x16\x0f\
    \x10\ny\n\x02\x04\x03\x12\x04\x1b\0\x1e\x01\x1am\x20Replace\x20Struct\
    \x20with\x20Any?\n\x20https://developers.google.com/protocol-buffers/doc\
    s/reference/google.protobuf#any\n\n\n\n\x03\x04\x03\x01\x12\x03\x1b\x08\
    \x1e\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x1c\x04\x14\n\r\n\x05\x04\x03\x02\
    \0\x04\x12\x04\x1c\x04\x1b\x20\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x1c\
    \x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x1c\x0b\x0f\n\x0c\n\x05\x04\
    \x03\x02\0\x03\x12\x03\x1c\x12\x13\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\
    \x1d\x04/\n\x0c\n\x05\x04\x03\x02\x01\x04\x12\x03\x1d\x04\x0c\n\x0c\n\
    \x05\x04\x03\x02\x01\x06\x12\x03\x1d\r#\n\x0c\n\x05\x04\x03\x02\x01\x01\
    \x12\x03\x1d$*\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x1d-.b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
